fpw_colonization_category = {

	colonization_descision = {

		visible = {
			FROM = {
				is_owned_by = TRB
			}
		}

		available = {
			FROM = {
				NOT = {
					is_owned_by = TRB
				}
			}
		}

		allowed = {
			always = no
		}

		state_target = yes
		target_root_trigger = {
			FROM = {
				original_tag = TRB
			}
		}

		highlight_states = {
			highlight_states_trigger = {
				FROM = {
					state = THIS
				}
			}
		}

		icon = GFX_decision_colonize
		fire_only_once = no
		days_mission_timeout = ROOT.colonial_time
		#days_mission_timeout = 5

		ai_will_do = {
			factor = 200
			modifier = {
				factor = 0
				is_historical_focus_on = yes
			}
		}

		timeout_effect = {
			FROM = {
				# now that we have multiple colonisations at the same time this limit has to be changed

				# Calculate the debuff amount
				set_variable = { ROOT.temp_debuff_population = state_population_k }
				round_variable = ROOT.temp_debuff_population
				set_variable = { ROOT.temp_num = 0.003 }
				multiply_variable = { ROOT.temp_num = ROOT.temp_debuff_population }
				add_to_variable = { ROOT.temp_num = 6 }
				set_variable = { ROOT.temp_debuff = ROOT.temp_num }
				round_variable = ROOT.temp_debuff
				add_to_variable = { ROOT.debuff_tt = ROOT.temp_debuff }
				divide_variable = { ROOT.temp_debuff = 100 }

				# Sum of all debuffs
				subtract_from_variable = { ROOT.debuff = ROOT.temp_debuff }

				if= {
					limit = {
						check_variable = { ROOT.debuff > 100 }
					}
					set_variable = { ROOT.debuff = 100 }
				}

				transfer_state_to = ROOT
				clr_state_flag = colonizing_by_@ROOT
				clr_state_flag = tribe_state
				set_state_flag = is_colonized_by_@ROOT

				#log = "Phase 2: [THIS.GetID]"
				
				random_neighbor_state = {
					limit = {
						check_variable = { THIS.tribal = PREV.tribal }
						has_state_flag = tribe_state
						is_owned_by = TRB
					}
					#log = "Found new state to use: [THIS.GetID]"
					set_variable = { ROOT.colonial_time = 50 }
					set_variable = { ROOT.temp_population = state_population_k }
					divide_variable = { ROOT.temp_population = 50 }
					add_to_variable = { ROOT.temp_population = 1 }

					multiply_variable = {
						var = ROOT.colonial_time
						value = ROOT.temp_population
					}

					# malaria
					# not has tech
					#multiply_variable = {
					#    var = ROOT.colonial_time
					#    value = 9
					#}

					multiply_variable = {
						var = ROOT.colonial_time
						value = ROOT.extra_colonizing_speed
					}

					set_variable = { ROOT.colonial_time = 1 }
			
					#transfer_state_to = ROOT
					set_state_flag = colonizing_by_@ROOT

					set_variable = { THIS.integration_time = ROOT.colonial_time }
					
					#log = "Phase 1: [THIS.GetID]"

					ROOT = {
						activate_targeted_decision = {
							target = PREV
							decision = colonization_descision
						}
						set_country_flag = is_colonizing
					}
                    #log = "Activated via repeat"
				}
				
				ROOT = {
					# remove
					clr_country_flag = is_colonizing
					if = {
						limit = {
							NOT = {
								has_dynamic_modifier = {
									modifier = fpw_colonial_debuff
								}
							}
						}
						add_dynamic_modifier = { 
							modifier = fpw_colonial_debuff 
						}
						force_update_dynamic_modifier = yes
					}
				}

				every_state = {
					limit = {
						check_variable = { tribal = FROM.tribal }
						has_state_flag = tribe_state
						is_owned_by = TRB
					}
					log = "[This.GetName] ([This.GetID]) is valid state"
				}
			}
		}
	}

	integration_descision = {

		visible = {
			if = {
				limit = {
					any_owned_state = {
						has_state_flag = is_colonized_by_@ROOT
					}
				}
			}
		}

		available = {
			NOT = {
				has_country_flag = is_integrating
			}
		}

		allowed = {
			if = {
				limit = {
					any_owned_state = {
						has_state_flag = is_colonized_by_@ROOT
					}
				}
			}	
		}

		state_target = yes
		target_trigger = {
			FROM = {
				has_state_flag = is_colonized_by_@ROOT
			}
		}

		icon = GFX_decision_integration
		fire_only_once = no
		days_remove = THIS.integration_time
		#days_remove = 5

		ai_will_do = {
			factor = 200
			modifier = {
				factor = 0
				is_historical_focus_on = yes
			}
		}

		complete_effect = {
			ROOT = {
				set_country_flag = is_integrating
			}
		}

		remove_effect = {
			FROM = {
				clr_state_flag = is_colonized_by_@ROOT
				add_claim_by = ROOT 

				set_variable = { ROOT.temp_debuff_population_to_remove = state_population_k }
				round_variable = ROOT.temp_debuff_population_to_remove

				# Calculation of the Function
				set_variable = { ROOT.temp_num_to_remove = 0.003 }
				multiply_variable = { ROOT.temp_num_to_remove = ROOT.temp_debuff_population_to_remove } # times population_k
				add_to_variable = { ROOT.temp_num_to_remove = 6 }

				# Make Ready for usage
				set_variable = { ROOT.temp_debuff_to_remove = ROOT.temp_num_to_remove }
				round_variable = ROOT.temp_debuff_to_remove

				# Setup for Tooltip
				subtract_from_variable = { ROOT.debuff_tt = ROOT.temp_debuff_to_remove }

				# Setup for usage in modifier(0.xx)
				divide_variable = { ROOT.temp_debuff_to_remove = 100 }

				# Sum of all debuffs
				add_to_variable = { ROOT.debuff = ROOT.temp_debuff_to_remove }
			}
			ROOT = {
				clr_country_flag = is_integrating
				force_update_dynamic_modifier = yes
			}
		}
	}
}